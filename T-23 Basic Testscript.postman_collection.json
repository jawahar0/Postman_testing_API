{
	"info": {
		"_postman_id": "0698168a-9ad5-4e1b-8531-da238f5c0c34",
		"name": "T-23 Basic Testscript",
		"description": "StartFragment\n\n**The Collection Runner enables you to run the requests in a Postman Collection in a specified order to test the functionality of your API**. The Collection Runner logs the test results for each request, and it can use scripts to pass data between requests and change the request workflow.\n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31637409"
	},
	"item": [
		{
			"name": "Data From JSON File",
			"item": [
				{
					"name": "Sending data form json file",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Data Driven in JSON File Uploaad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify the status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"Verify the response is Created\",()=> {",
									"    pm.expect(pm.response.status).to.equal('Created');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"First_Name\":\"{{First_Name}}\",\r\n    \"Last_Name\":\"{{Last_Name}}\",\r\n    \"EmailID\":\"{{EmailID}}\",\r\n    \"Salary\":\"{{Salary}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/employees/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"employees",
								""
							]
						},
						"description": "StartFragment\n\nData-driven testing is a testing methodology where the test case data is separated from the test case logic. You create a series of test scripts that see the same test steps performed repeatedly in the same order, but with a variation of data. In data-driven testing, a data source, like a spreadsheet or other table, is used for the input values and typically the testing environment is not hard-coded.\n\nAs an extension of your automated test cases, in data-driven testing, data external to your functional tests is loaded and used to extend these cases.\n\n  \nEndFragment"
					},
					"response": []
				},
				{
					"name": "Data Driven in JSON File Upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify the status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"Verify the response is Created\",()=> {",
									"    pm.expect(pm.response.status).to.equal('Created');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"First_Name\":\"{{First_Name}}\",\r\n    \"Last_Name\":\"{{Last_Name}}\",\r\n    \"EmailID\":\"{{EmailID}}\",\r\n    \"Salary\":\"{{Salary}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/employees/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"employees",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data From CSV File",
			"item": [
				{
					"name": "Send data from CSV File Upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Verify the status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"})",
									"",
									"pm.test(\"Verify the response is Created\",()=> {",
									"    pm.expect(pm.response.status).to.equal('Created');",
									"})",
									"",
									"pm.test(\"Response time is below 30ms\",()=> {",
									"pm.expect(pm.response.responseTime).to.below(10) ;",
									"})",
									"",
									"pm.test(\"Body contains Username\", ()=> {",
									"    pm.expect(pm.response.text()).to.include(data.Username);",
									"    console.log(data[\"Username\"]) //1st Old style code",
									"})",
									"pm.test(\"Body contains Role\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"Role\"))// 2nd new style code",
									"    console.log(pm.iterationData.get(\"Role\"))",
									"})",
									"pm.test(\"Body contains age\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"age\"))// 2nd new style code",
									"    console.log(pm.iterationData.get(\"age\"))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\":\"{{Username}}\",\r\n    \"Role\":\"{{Role}}\",\r\n    \"age\":\"{{age}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/employees/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"employees",
								""
							]
						},
						"description": "StartFragment\n\nData-driven testing is a testing methodology where the test case data is separated from the test case logic. You create a series of test scripts that see the same test steps performed repeatedly in the same order, but with a variation of data. In data-driven testing, a data source, like a spreadsheet or other table, is used for the input values and typically the testing environment is not hard-coded.\n\nAs an extension of your automated test cases, in data-driven testing, data external to your functional tests is loaded and used to extend these cases.\n\n**CSV** stands for Comma Separated Value. This file is simply a text only file. A CSV file can't save formatting, formulas, or anything other than text and numbers.Â It saves the data in a simple table format, one that can be imported into almost any program.\n\nEndFragment"
					},
					"response": []
				}
			]
		},
		{
			"name": "Tutorial-21 ScriptExecutionOrder",
			"item": [
				{
					"name": "Google",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"After Google\")",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Before Google\")",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.google.co.in",
							"protocol": "https",
							"host": [
								"www",
								"google",
								"co",
								"in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"After Bing\")",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Before Bing\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.bing.com",
							"protocol": "https",
							"host": [
								"www",
								"bing",
								"com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Yahoo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"After Yahoo\")",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"Before Yahoo\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.yahoo.com",
							"protocol": "https",
							"host": [
								"www",
								"yahoo",
								"com"
							]
						}
					},
					"response": []
				},
				{
					"name": "NewEmployeeCreation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest(\"http://localhost:3000/employees\", function (err, response) {\r",
									"    if(response.code==201){\r",
									"        console.error(\"Health check failed server is down\")\r",
									"        throw new error(\"server is down\")\r",
									"    }\r",
									"    console.log(response.json());\r",
									"});\r",
									"pm.globals.unset(\"GoogleURL\");\r",
									"\r",
									"console.log(\"Before request\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"After request\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": \"Jawahar\",\r\n    \"LastName\": \"s\",\r\n    \"EmailId\": \"jawahar099@gmail.com\",\r\n    \"salary\": \"9000\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/employees",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"employees"
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragment\n\nIn Postman, the script execution order for a single request looks like this:\n\n- A pre-request script associated with a request will execute before the request is sent\n- A test script associated with a request will execute after the request is sent\n    \n\n<img src=\"https://content.pstmn.io/b760eead-97ce-41e4-8e0d-8f50792d6ee6/cmVxLXJlc3AuanBn\">\n\n**A pre-request script associated with a collection will run prior to every request in the collection**. A pre-request script associated with a folder will run prior to every direct child request in the folder. A test script associated with a collection will run after every request in the collection.\n\n<img src=\"https://content.pstmn.io/06a36840-8bca-49c7-afd9-9fe6c1cd6912/aW1hZ2UucG5n\" alt=\"Pre%20request%20and%20testscript%20workflow\" width=\"1286\" height=\"456\">\n\n- A pre-request script associated with a folder will run prior to every direct child request in the folder.\n    \n- A test script associated with a collection will run after every request in the collection.\n    \n- A test script associated with a folder will run after every direct child request in the folder.\n    \n\nEndFragment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"Folder level pre request\")"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"console.log(\"Folder level (test) request script\")"
						]
					}
				}
			]
		},
		{
			"name": "Tutorial-22 Request Chaining",
			"item": [
				{
					"name": "AddNewUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse=JSON.parse(responseBody)\r",
									"var id=jsonResponse.id //json path\r",
									"console.log(id)\r",
									"\r",
									"var jsonResponse2=pm.response.json()\r",
									"var id2=jsonResponse2.id\r",
									"console.log(id2)\r",
									"\r",
									"pm.collectionVariables.set(\"EmployeeID\", id2);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"FirstName\": \"tommy\",\r\n    \"LastName\": \"s\",\r\n    \"EmailId\": \"tommy@gmail.com\",\r\n    \"salary\": \"10000\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/employees",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"employees"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAnOldUser",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/employees/{{EmployeeID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"employees",
								"{{EmployeeID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteOldUser",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/employees/{{EmployeeID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"employees",
								"{{EmployeeID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "<img src=\"https://files.readme.io/27bb76e-ChainingRequest.png\">\n\nStartFragment\n\nChaining API requests is a technique where you programmatically make multiple API requests to perform a particular function, with each request feeding subsequent requests.\n\nUsing a REST API client likeÂ [Postman](https://www.postman.com/), you can create a workflow that makes a request to one of the WhiteHat Dynamic API operations, then uses the information contained in the response to make a request to a different operation. For example, using the WhiteHat Dynamic APIs, you can create a workflow that contains API requests to:\n\n1. Check if a name is available for a new mobile application.\n    \n2. Create the mobile application.\n    \n3. Create the scan instance.\n    \n4. Provide credentials for the scan.\n    \n\nEndFragment"
		},
		{
			"name": "Write your first script",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"verify status code 200\",function(){\r",
							"    pm.response.to.have.status(200) //bdd chain\r",
							"})\r",
							"\r",
							"pm.test(\"verify status code using expert\",function(){\r",
							"pm.expect(pm.response.code).to.eqls(200) //chai assertion using expert function\r",
							"})\r",
							"\r",
							"pm.test(\"Assert status message as OK\",()=>{\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"})\r",
							"pm.test(\"Assert OK using expert\",()=>{\r",
							"    pm.expect(pm.response.status).to.equal(\"OK\")\r",
							"})\r",
							"\r",
							"pm.test(\"Assert name is David\",()=>{\r",
							"    var jsonResonse=pm.response.json()\r",
							"    pm.expect(jsonResonse[1].name).to.deep.equal(\"David\")\r",
							"})\r",
							"\r",
							"pm.test(\"check if jawahar is present in the response\",()=>{\r",
							"    pm.expect(pm.response.text()).to.include(\"jawahar\")\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/employees/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees",
						""
					]
				},
				"description": "StartFragment\n\nThe following are provided as chainable getters to improve the readability of your assertions.\n\n**Chains**\n\n- to\n    \n- be\n    \n- been\n    \n- is\n    \n- that\n    \n- which\n    \n- and\n    \n- has\n    \n- have\n    \n- with\n    \n- at\n    \n- of\n    \n- same\n    \n- but\n    \n- does\n    \n- still\n    \n- also\n    \n\nEndFragment"
			},
			"response": []
		},
		{
			"name": "Writing Test With Snippets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(30);\r",
							"});\r",
							"console.log(pm.globals.get(\"GoogleURL\"))\r",
							"// console.log(pm.collectionVariables.get(\"email\"))\r",
							"// console.log(pm.environment.get(\"email\"))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/employees/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"employees",
						""
					]
				},
				"description": "StartFragment**The interactive code snippets tool lets you easily test API requests and generate code samples specific to those requests**. For any given method, the tool shows code snippets for one or more use cases, and each use case describes a common way of calling that method.Â EndFragment"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "EmployeeID",
			"value": ""
		}
	]
}